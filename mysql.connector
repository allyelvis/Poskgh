import mysql.connector
import mysql.connector

class RestaurantPOS:
    """
    A class to represent a Restaurant Point of Sale system with stock management and inventory.

    This class provides functionality to manage orders, update stock quantities, and retrieve inventory information
    using a MySQL database. It also integrates with cloud APIs for additional features.

    Attributes:
    - db_host (str): The hostname or IP address of the MySQL database server.
    - db_user (str): The username to connect to the MySQL database.
    - db_password (str): The password to connect to the MySQL database.
    - db_name (str): The name of the MySQL database.
    """

    def __init__(self, db_host: str, db_user: str, db_password: str, db_name: str):
        """
        Constructs a new RestaurantPOS instance.

        Parameters:
        - db_host (str): The hostname or IP address of the MySQL database server.
        - db_user (str): The username to connect to the MySQL database.
        - db_password (str): The password to connect to the MySQL database.
        - db_name (str): The name of the MySQL database.
        """

        # Establishing a connection to the MySQL database
        self.db_connection = mysql.connector.connect(
            host=db_host,
            user=db_user,
            password=db_password,
            database=db_name
        )

    def place_order(self, item_id: int, quantity: int):
        """
        Places an order for a specific item with the given quantity.

        This function updates the stock quantity of the item in the database and performs any necessary
        calculations or integrations with cloud APIs.

        Parameters:
        - item_id (int): The ID of the item to be ordered.
        - quantity (int): The quantity of the item to be ordered.

        Raises:
        - ValueError: If the item ID or quantity is invalid or negative.

        Returns:
        str: A confirmation message indicating the success of the order placement.
        """

        # Validating the item ID and quantity
        if item_id <= 0:
            raise ValueError("Invalid item ID.")
        if quantity <= 0:
            raise ValueError("Invalid quantity.")

        # Updating the stock quantity in the database
        cursor = self.db_connection.cursor()
        cursor.execute("UPDATE items SET stock_quantity = stock_quantity - %s WHERE id = %s", (quantity, item_id))
        self.db_connection.commit()

        # Performing additional calculations or integrations with cloud APIs

        # Returning a confirmation message
        return "Order placed successfully."

    def get_inventory(self):
        """
        Retrieves the current inventory information from the database.

        This function fetches the item details including ID, name, price, and stock quantity from the database.

        Returns:
        list: A list of dictionaries representing the inventory items.
              Each dictionary contains the following keys: 'id', 'name', 'price', 'stock_quantity'.
        """

        # Fetching the inventory items from the database
        cursor = self.db_connection.cursor(dictionary=True)
        cursor.execute("SELECT id, name, price, stock_quantity FROM items")
        inventory = cursor.fetchall()

        # Returning the inventory items
        return inventory

# Example usage of the RestaurantPOS class:

# Creating an instance of RestaurantPOS
pos = RestaurantPOS("localhost", "username", "password", "restaurant_db")

# Placing an order
try:
    order_confirmation = pos.place_order(1, 5)
    print(order_confirmation)
except ValueError as e:
    print(f"Error placing order: {e}")

# Retrieving inventory information
inventory = pos.get_inventory()
for item in inventory:
    print(f"Item ID: {item['id']}, Name: {item['name']}, Price: {item['price']}, Stock Quantity: {item['stock_quantity']}")